// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/messages/draft": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "ユーザーがメッセージの下書きを作成します。AIによるトーン変換も含まれます。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "下書きメッセージを作成",
                "parameters": [
                    {
                        "description": "メッセージ作成リクエスト",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "作成成功",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "リクエストエラー",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "認証エラー",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "サーバーエラー",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/messages/sent": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "認証されたユーザーが送信した送信済みメッセージの一覧を取得します。受信者の名前も含まれます。",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "messages"
                ],
                "summary": "送信済みメッセージ一覧を取得",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "ページ番号",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "1ページあたりの件数",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "送信済みメッセージ一覧（recipientName、recipientEmailフィールド付き）",
                        "schema": {
                            "$ref": "#/definitions/models.GetSentMessagesResponse"
                        }
                    },
                    "401": {
                        "description": "認証エラー",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "サーバーエラー",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateMessageRequest": {
            "type": "object",
            "properties": {
                "originalText": {
                    "type": "string",
                    "maxLength": 1000
                },
                "reason": {
                    "type": "string",
                    "maxLength": 500
                },
                "recipientEmail": {
                    "type": "string"
                }
            }
        },
        "models.GetSentMessagesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "messages": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.MessageWithRecipientInfo"
                            }
                        },
                        "pagination": {
                            "$ref": "#/definitions/models.PaginationResponse"
                        }
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deliveredAt": {
                    "type": "string"
                },
                "finalText": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "originalText": {
                    "type": "string"
                },
                "readAt": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "recipientId": {
                    "type": "string"
                },
                "scheduledAt": {
                    "type": "string"
                },
                "selectedTone": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "sentAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.MessageStatus"
                },
                "updatedAt": {
                    "type": "string"
                },
                "variations": {
                    "$ref": "#/definitions/models.MessageVariations"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Message"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.MessageStatus": {
            "type": "string",
            "enum": [
                "draft",
                "processing",
                "scheduled",
                "sent",
                "delivered",
                "read"
            ],
            "x-enum-comments": {
                "MessageStatusDelivered": "配信完了",
                "MessageStatusDraft": "下書き",
                "MessageStatusProcessing": "AI変換中",
                "MessageStatusRead": "既読",
                "MessageStatusScheduled": "送信予約済み",
                "MessageStatusSent": "送信完了"
            },
            "x-enum-descriptions": [
                "下書き",
                "AI変換中",
                "送信予約済み",
                "送信完了",
                "配信完了",
                "既読"
            ],
            "x-enum-varnames": [
                "MessageStatusDraft",
                "MessageStatusProcessing",
                "MessageStatusScheduled",
                "MessageStatusSent",
                "MessageStatusDelivered",
                "MessageStatusRead"
            ]
        },
        "models.MessageVariations": {
            "type": "object",
            "properties": {
                "casual": {
                    "type": "string"
                },
                "constructive": {
                    "type": "string"
                },
                "gentle": {
                    "type": "string"
                }
            }
        },
        "models.MessageWithRecipientInfo": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deliveredAt": {
                    "type": "string"
                },
                "finalText": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "originalText": {
                    "type": "string"
                },
                "readAt": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "recipientEmail": {
                    "type": "string"
                },
                "recipientId": {
                    "type": "string"
                },
                "recipientName": {
                    "type": "string"
                },
                "scheduledAt": {
                    "type": "string"
                },
                "selectedTone": {
                    "type": "string"
                },
                "senderId": {
                    "type": "string"
                },
                "sentAt": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/models.MessageStatus"
                },
                "updatedAt": {
                    "type": "string"
                },
                "variations": {
                    "$ref": "#/definitions/models.MessageVariations"
                }
            }
        },
        "models.PaginationResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "Yanwari Message API",
	Description:      "やんわり伝言サービス - AIを使って気まずい用件を優しく伝えるサービスのAPI",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
