name: Daily Burndown Chart Update

on:
  schedule:
    # Âπ≥Êó•„ÅÆÊúù9ÊôÇ(JST)„Å´ÂÆüË°å (UTC 0ÊôÇ)
    - cron: '0 0 * * 1-5'
  workflow_dispatch:
    inputs:
      milestone_number:
        description: 'Milestone number for sprint'
        required: true
        default: '1'

jobs:
  update-burndown:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create burndown directory
        run: mkdir -p docs/burndown

      - name: Collect sprint data
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // MilestoneÁï™Âè∑„ÇíÂèñÂæóÔºàÊâãÂãïÂÆüË°åÊôÇ„ÅØÂÖ•ÂäõÂÄ§„ÄÅÂÆöÊúüÂÆüË°åÊôÇ„ÅØÊúÄÊñ∞„ÅÆ„Ç™„Éº„Éó„É≥„Éû„Ç§„É´„Çπ„Éà„Éº„É≥Ôºâ
            let milestoneNumber = context.payload.inputs?.milestone_number;
            
            if (!milestoneNumber) {
              const milestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'created',
                direction: 'desc'
              });
              
              if (milestones.data.length === 0) {
                console.log('No open milestones found');
                return;
              }
              
              milestoneNumber = milestones.data[0].number;
            }
            
            console.log(`Processing milestone: ${milestoneNumber}`);
            
            // Milestone„ÅÆË©≥Á¥∞ÂèñÂæó
            const milestone = await github.rest.issues.getMilestone({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone_number: milestoneNumber
            });
            
            // MilestoneÈÖç‰∏ã„ÅÆIssue‰∏ÄË¶ßÂèñÂæó
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              milestone: milestoneNumber,
              state: 'all',
              per_page: 100
            });
            
            // Ë¶ãÁ©ç„ÇÇ„Çä„Éù„Ç§„É≥„Éà„ÅÆË®àÁÆó
            const totalPoints = issues.data.reduce((sum, issue) => {
              const estimateLabel = issue.labels.find(label => 
                label.name.startsWith('estimate/')
              );
              const points = estimateLabel ? 
                parseInt(estimateLabel.name.split('/')[1]) : 1;
              return sum + points;
            }, 0);
            
            const remainingPoints = issues.data
              .filter(issue => issue.state === 'open')
              .reduce((sum, issue) => {
                const estimateLabel = issue.labels.find(label => 
                  label.name.startsWith('estimate/')
                );
                const points = estimateLabel ? 
                  parseInt(estimateLabel.name.split('/')[1]) : 1;
                return sum + points;
              }, 0);
            
            // ‰ªäÊó•„ÅÆ„Éá„Éº„Çø
            const today = new Date().toISOString().split('T')[0];
            const todayData = {
              date: today,
              total_points: totalPoints,
              remaining_points: remainingPoints,
              completed_points: totalPoints - remainingPoints,
              open_issues: issues.data.filter(i => i.state === 'open').length,
              closed_issues: issues.data.filter(i => i.state === 'closed').length
            };
            
            // Êó¢Â≠ò„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
            const dataPath = `docs/burndown/sprint-${milestoneNumber}.json`;
            let sprintData = {
              milestone: {
                number: milestone.data.number,
                title: milestone.data.title,
                description: milestone.data.description,
                due_on: milestone.data.due_on,
                created_at: milestone.data.created_at
              },
              daily_data: []
            };
            
            if (fs.existsSync(dataPath)) {
              const existingData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));
              sprintData = existingData;
            }
            
            // ‰ªäÊó•„ÅÆ„Éá„Éº„Çø„ÅåÊó¢„Å´Â≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            const existingIndex = sprintData.daily_data.findIndex(
              data => data.date === today
            );
            
            if (existingIndex >= 0) {
              // Êó¢Â≠ò„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
              sprintData.daily_data[existingIndex] = todayData;
            } else {
              // Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÇíËøΩÂä†
              sprintData.daily_data.push(todayData);
            }
            
            // „Éá„Éº„Çø„Çí„ÇΩ„Éº„ÉàÔºàÊó•‰ªòÈ†ÜÔºâ
            sprintData.daily_data.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            // JSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
            fs.writeFileSync(dataPath, JSON.stringify(sprintData, null, 2));
            
            console.log(`Burndown data updated for ${today}`);
            console.log(`Total points: ${totalPoints}, Remaining: ${remainingPoints}`);
            
            // Áí∞Â¢ÉÂ§âÊï∞„Å´Ë®≠ÂÆöÔºàÂæåÁ∂ö„Çπ„ÉÜ„ÉÉ„Éó„Åß‰ΩøÁî®Ôºâ
            core.setOutput('milestone_number', milestoneNumber);
            core.setOutput('milestone_title', milestone.data.title);
            core.setOutput('remaining_points', remainingPoints);
            core.setOutput('total_points', totalPoints);

      - name: Generate HTML dashboard
        run: |
          cat > docs/burndown/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Burndown Charts - pandalize Team</title>
              <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; margin: 20px; }
                  .container { max-width: 1200px; margin: 0 auto; }
                  .chart-container { margin: 20px 0; }
                  .milestone-selector { margin: 20px 0; }
                  select { padding: 8px; font-size: 16px; }
                  .stats { display: flex; gap: 20px; margin: 20px 0; }
                  .stat-card { background: #f6f8fa; padding: 15px; border-radius: 8px; }
                  .updated { color: #666; font-size: 14px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üî• Burndown Charts</h1>
                  <div class="milestone-selector">
                      <label for="milestone-select">Sprint: </label>
                      <select id="milestone-select" onchange="loadMilestone()">
                          <option value="">ÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                      </select>
                  </div>
                  
                  <div id="milestone-info" style="display:none;">
                      <h2 id="milestone-title"></h2>
                      <div class="stats">
                          <div class="stat-card">
                              <strong>Á∑è„Éù„Ç§„É≥„Éà</strong><br>
                              <span id="total-points">-</span>
                          </div>
                          <div class="stat-card">
                              <strong>ÊÆã„Çä„Éù„Ç§„É≥„Éà</strong><br>
                              <span id="remaining-points">-</span>
                          </div>
                          <div class="stat-card">
                              <strong>ÂÆå‰∫ÜÁéá</strong><br>
                              <span id="completion-rate">-</span>
                          </div>
                          <div class="stat-card">
                              <strong>ÊúüÈôê</strong><br>
                              <span id="due-date">-</span>
                          </div>
                      </div>
                  </div>
                  
                  <div class="chart-container">
                      <canvas id="burndownChart" width="400" height="200"></canvas>
                  </div>
                  
                  <div class="updated" id="last-updated"></div>
              </div>
              
              <script>
                  let chart;
                  
                  async function loadAvailableSprints() {
                      try {
                          const response = await fetch('.');
                          const text = await response.text();
                          const parser = new DOMParser();
                          const doc = parser.parseFromString(text, 'text/html');
                          const links = doc.querySelectorAll('a');
                          const sprintFiles = [];
                          
                          links.forEach(link => {
                              const href = link.getAttribute('href');
                              if (href && href.startsWith('sprint-') && href.endsWith('.json')) {
                                  const sprintNumber = href.match(/sprint-(\d+)\.json/)[1];
                                  sprintFiles.push(sprintNumber);
                              }
                          });
                          
                          const select = document.getElementById('milestone-select');
                          sprintFiles.sort((a, b) => parseInt(b) - parseInt(a));
                          
                          sprintFiles.forEach(sprintNumber => {
                              const option = document.createElement('option');
                              option.value = sprintNumber;
                              option.textContent = `Sprint ${sprintNumber}`;
                              select.appendChild(option);
                          });
                          
                          if (sprintFiles.length > 0) {
                              select.value = sprintFiles[0];
                              loadMilestone();
                          }
                      } catch (error) {
                          console.error('„Çπ„Éó„É™„É≥„Éà‰∏ÄË¶ß„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', error);
                      }
                  }
                  
                  async function loadMilestone() {
                      const select = document.getElementById('milestone-select');
                      const milestoneNumber = select.value;
                      
                      if (!milestoneNumber) {
                          document.getElementById('milestone-info').style.display = 'none';
                          return;
                      }
                      
                      try {
                          const response = await fetch(`sprint-${milestoneNumber}.json`);
                          const data = await response.json();
                          
                          // „Éû„Ç§„É´„Çπ„Éà„Éº„É≥ÊÉÖÂ†±„ÅÆË°®Á§∫
                          document.getElementById('milestone-title').textContent = data.milestone.title;
                          document.getElementById('milestone-info').style.display = 'block';
                          
                          // ÊúÄÊñ∞„Éá„Éº„Çø„ÅÆÂèñÂæó
                          const latestData = data.daily_data[data.daily_data.length - 1];
                          if (latestData) {
                              document.getElementById('total-points').textContent = latestData.total_points;
                              document.getElementById('remaining-points').textContent = latestData.remaining_points;
                              document.getElementById('completion-rate').textContent = 
                                  Math.round((latestData.completed_points / latestData.total_points) * 100) + '%';
                              document.getElementById('due-date').textContent = 
                                  data.milestone.due_on ? new Date(data.milestone.due_on).toLocaleDateString('ja-JP') : 'Êú™Ë®≠ÂÆö';
                              document.getElementById('last-updated').textContent = 
                                  `ÊúÄÁµÇÊõ¥Êñ∞: ${new Date(latestData.date).toLocaleDateString('ja-JP')}`;
                          }
                          
                          // „ÉÅ„É£„Éº„ÉàÊèèÁîª
                          drawBurndownChart(data);
                          
                      } catch (error) {
                          console.error('„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', error);
                      }
                  }
                  
                  function drawBurndownChart(data) {
                      const ctx = document.getElementById('burndownChart').getContext('2d');
                      
                      if (chart) {
                          chart.destroy();
                      }
                      
                      const labels = data.daily_data.map(d => {
                          const date = new Date(d.date);
                          return `${date.getMonth() + 1}/${date.getDate()}`;
                      });
                      
                      const remainingPoints = data.daily_data.map(d => d.remaining_points);
                      
                      // ÁêÜÊÉ≥Á∑ö„ÅÆË®àÁÆóÔºà„Çπ„Éó„É™„É≥„ÉàÈñãÂßã„Åã„ÇâÁµÇ‰∫Ü„Åæ„ÅßÔºâ
                      const startDate = new Date(data.milestone.created_at);
                      const endDate = data.milestone.due_on ? new Date(data.milestone.due_on) : new Date();
                      const totalDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));
                      const totalPoints = data.daily_data[0]?.total_points || 0;
                      
                      const idealLine = data.daily_data.map((_, index) => {
                          const dayProgress = index / (data.daily_data.length - 1 || 1);
                          return Math.max(0, totalPoints * (1 - dayProgress));
                      });
                      
                      chart = new Chart(ctx, {
                          type: 'line',
                          data: {
                              labels: labels,
                              datasets: [{
                                  label: 'ÊÆã„Çä„Éù„Ç§„É≥„Éà',
                                  data: remainingPoints,
                                  borderColor: 'rgb(255, 99, 132)',
                                  backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                  tension: 0.1
                              }, {
                                  label: 'ÁêÜÊÉ≥Á∑ö',
                                  data: idealLine,
                                  borderColor: 'rgb(54, 162, 235)',
                                  backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                  borderDash: [5, 5],
                                  tension: 0.1
                              }]
                          },
                          options: {
                              responsive: true,
                              plugins: {
                                  title: {
                                      display: true,
                                      text: 'Sprint Burndown Chart'
                                  }
                              },
                              scales: {
                                  y: {
                                      beginAtZero: true,
                                      title: {
                                          display: true,
                                          text: 'Story Points'
                                      }
                                  },
                                  x: {
                                      title: {
                                          display: true,
                                          text: 'Date'
                                      }
                                  }
                              }
                          }
                      });
                  }
                  
                  // „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´ÂÆüË°å
                  loadAvailableSprints();
              </script>
          </body>
          </html>
          EOF

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/burndown/
          git diff --staged --quiet || git commit -m "üî• Update burndown chart data

          Milestone: ${{ steps.collect-sprint-data.outputs.milestone_title }}
          Remaining: ${{ steps.collect-sprint-data.outputs.remaining_points }}/${{ steps.collect-sprint-data.outputs.total_points }} points

          ü§ñ Generated with GitHub Actions"
          git push

      - name: Discord notification
        if: env.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "üìä Daily Burndown Update",
                "color": 3447003,
                "fields": [
                  {
                    "name": "Sprint",
                    "value": "${{ steps.collect-sprint-data.outputs.milestone_title }}",
                    "inline": true
                  },
                  {
                    "name": "Progress", 
                    "value": "${{ steps.collect-sprint-data.outputs.remaining_points }}/${{ steps.collect-sprint-data.outputs.total_points }} points remaining",
                    "inline": true
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'