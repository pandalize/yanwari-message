#!/bin/bash

# やんわり伝言 - 起動・管理スクリプト
# 使用方法:
#   ./yanwari-start              - 全環境起動
#   ./yanwari-start restart      - Flutterアプリのホットリスタート
#   ./yanwari-start reload       - Flutterアプリのホットリロード
#   ./yanwari-start stop         - 全環境停止
#   ./yanwari-start status       - 環境状況確認

# 色付き出力用の定義
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# プロジェクトルートディレクトリ
PROJECT_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Flutter パスの設定
export PATH="$PATH:/Users/fujinoyuki/development/flutter/bin"

# シミュレーターIDを取得する関数
get_simulator_id() {
    # iPhone 16 Pro を優先的に探す
    SIMULATOR_ID=$(xcrun simctl list devices | grep "iPhone 16 Pro" | grep -v "unavailable" | head -1 | grep -oE "[A-F0-9-]{36}")
    
    # iPhone 16 Pro が見つからない場合は他のiPhoneを探す
    if [ -z "$SIMULATOR_ID" ]; then
        SIMULATOR_ID=$(xcrun simctl list devices | grep -E "iPhone 1[4-6]" | grep -v "unavailable" | head -1 | grep -oE "[A-F0-9-]{36}")
    fi
    
    echo "$SIMULATOR_ID"
}

# Flutter プロセスを見つける関数
find_flutter_process() {
    # Flutterプロセスを探す（yanwari-messageディレクトリで動いているもの）
    FLUTTER_PID=$(ps aux | grep "flutter run" | grep "yanwari-message" | grep -v grep | awk '{print $2}' | head -1)
    echo "$FLUTTER_PID"
}

# ホットリスタート機能
hot_restart() {
    echo -e "${CYAN}🔄 Flutterアプリのホットリスタート実行中...${NC}"
    
    FLUTTER_PID=$(find_flutter_process)
    
    if [ -z "$FLUTTER_PID" ]; then
        echo -e "${RED}❌ 動作中のFlutterプロセスが見つかりません${NC}"
        echo "まず './yanwari-start' でアプリを起動してください"
        return 1
    fi
    
    # Flutterプロセスに 'R' (大文字) を送信してホットリスタート
    echo "R" | sudo -n tee /proc/$FLUTTER_PID/fd/0 2>/dev/null || {
        echo -e "${YELLOW}⚠️  直接入力が必要です。Flutterが動いているターミナルで 'R' キーを押してください${NC}"
        
        # AppleScriptでFlutterターミナルをフォーカスしてRキーを送信
        osascript -e "
        tell application \"Terminal\"
            activate
            set targetWindow to first window whose name contains \"flutter run\"
            if targetWindow exists then
                do script \"\" in targetWindow
                delay 0.5
            end if
        end tell
        " 2>/dev/null || echo -e "${YELLOW}Flutterターミナルで手動で 'R' キーを押してください${NC}"
    }
    
    echo -e "${GREEN}✅ ホットリスタート信号を送信しました${NC}"
    echo "数秒待ってからアプリが再起動されます"
}

# ホットリロード機能
hot_reload() {
    echo -e "${CYAN}⚡ Flutterアプリのホットリロード実行中...${NC}"
    
    FLUTTER_PID=$(find_flutter_process)
    
    if [ -z "$FLUTTER_PID" ]; then
        echo -e "${RED}❌ 動作中のFlutterプロセスが見つかりません${NC}"
        echo "まず './yanwari-start' でアプリを起動してください"
        return 1
    fi
    
    # Flutterプロセスに 'r' (小文字) を送信してホットリロード
    echo "r" | sudo -n tee /proc/$FLUTTER_PID/fd/0 2>/dev/null || {
        echo -e "${YELLOW}⚠️  直接入力が必要です。Flutterが動いているターミナルで 'r' キーを押してください${NC}"
        
        # AppleScriptでFlutterターミナルをフォーカスしてrキーを送信
        osascript -e "
        tell application \"Terminal\"
            activate
            set targetWindow to first window whose name contains \"flutter run\"
            if targetWindow exists then
                do script \"\" in targetWindow
                delay 0.5
            end if
        end tell
        " 2>/dev/null || echo -e "${YELLOW}Flutterターミナルで手動で 'r' キーを押してください${NC}"
    }
    
    echo -e "${GREEN}✅ ホットリロード信号を送信しました${NC}"
    echo "変更が即座に反映されます"
}

# 環境状況確認
check_status() {
    echo -e "${BLUE}📊 やんわり伝言 - 環境状況確認${NC}"
    echo "=================================="
    
    # バックエンドの確認
    echo -e "\n${GREEN}1. バックエンドサーバー:${NC}"
    if curl -s http://localhost:8080/health > /dev/null 2>&1; then
        echo -e "  ✅ ${GREEN}起動中${NC} (http://localhost:8080)"
        curl -s http://localhost:8080/health | jq . 2>/dev/null || echo "  ヘルスチェック応答あり"
    else
        echo -e "  ❌ ${RED}停止中${NC}"
    fi
    
    # フロントエンドの確認
    echo -e "\n${GREEN}2. フロントエンドサーバー:${NC}"
    if lsof -i :5173 > /dev/null 2>&1; then
        echo -e "  ✅ ${GREEN}起動中${NC} (http://localhost:5173)"
    else
        echo -e "  ❌ ${RED}停止中${NC}"
    fi
    
    # シミュレーターの確認
    echo -e "\n${GREEN}3. iOSシミュレーター:${NC}"
    SIMULATOR_ID=$(get_simulator_id)
    if [ -n "$SIMULATOR_ID" ]; then
        SIMULATOR_STATE=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -oE "\(.*\)" | tr -d "()")
        SIMULATOR_NAME=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | cut -d'(' -f1 | xargs)
        
        if [ "$SIMULATOR_STATE" = "Booted" ]; then
            echo -e "  ✅ ${GREEN}起動中${NC} ($SIMULATOR_NAME)"
        else
            echo -e "  ⏸️  ${YELLOW}停止中${NC} ($SIMULATOR_NAME)"
        fi
    else
        echo -e "  ❌ ${RED}利用可能なシミュレーターなし${NC}"
    fi
    
    # Flutterアプリの確認
    echo -e "\n${GREEN}4. Flutterアプリ:${NC}"
    FLUTTER_PID=$(find_flutter_process)
    if [ -n "$FLUTTER_PID" ]; then
        echo -e "  ✅ ${GREEN}起動中${NC} (PID: $FLUTTER_PID)"
        
        # プロセス詳細
        FLUTTER_DETAILS=$(ps -p $FLUTTER_PID -o pid,cmd | tail -1)
        echo "  詳細: $FLUTTER_DETAILS"
    else
        echo -e "  ❌ ${RED}停止中${NC}"
    fi
    
    echo -e "\n${BLUE}===================================="
    echo -e "使用可能なコマンド:"
    echo -e "  ./yanwari-start restart  # ホットリスタート"
    echo -e "  ./yanwari-start reload   # ホットリロード"
    echo -e "  ./yanwari-start stop     # 全環境停止${NC}"
}

# 全環境停止
stop_all() {
    echo -e "${RED}🛑 やんわり伝言 - 全環境停止中...${NC}"
    
    # Flutterアプリの停止
    echo "1. Flutterアプリを停止中..."
    FLUTTER_PID=$(find_flutter_process)
    if [ -n "$FLUTTER_PID" ]; then
        kill -TERM "$FLUTTER_PID" 2>/dev/null
        echo "  Flutterアプリを停止しました (PID: $FLUTTER_PID)"
    fi
    
    # バックエンドサーバーの停止
    echo "2. バックエンドサーバーを停止中..."
    BACKEND_PID=$(lsof -ti :8080)
    if [ -n "$BACKEND_PID" ]; then
        kill -TERM "$BACKEND_PID" 2>/dev/null
        echo "  バックエンドサーバーを停止しました (PID: $BACKEND_PID)"
    fi
    
    # フロントエンドサーバーの停止
    echo "3. フロントエンドサーバーを停止中..."
    FRONTEND_PID=$(lsof -ti :5173)
    if [ -n "$FRONTEND_PID" ]; then
        kill -TERM "$FRONTEND_PID" 2>/dev/null
        echo "  フロントエンドサーバーを停止しました (PID: $FRONTEND_PID)"
    fi
    
    # シミュレーターの停止
    echo "4. iOSシミュレーターを停止中..."
    SIMULATOR_ID=$(get_simulator_id)
    if [ -n "$SIMULATOR_ID" ]; then
        xcrun simctl shutdown "$SIMULATOR_ID" 2>/dev/null
        echo "  シミュレーターを停止しました"
    fi
    
    echo -e "${GREEN}✅ 全環境の停止が完了しました${NC}"
}

# 全環境起動（既存のstart-all.shの内容をベースに）
start_all() {
    echo -e "${BLUE}🚀 やんわり伝言 - 全環境起動開始${NC}"
    echo "=================================="

    # 1. バックエンドサーバーの起動
    echo -e "\n${GREEN}1. バックエンドサーバー起動中...${NC}"
    cd "$PROJECT_ROOT/backend"

    # 既存のバックエンドプロセスを確認
    if lsof -i :8080 > /dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  ポート8080は既に使用中です${NC}"
        echo "既存のバックエンドサーバーを使用します"
    else
        # 完全なやんわり伝言バックエンドを起動
        osascript -e "tell app \"Terminal\" to do script \"cd '$PROJECT_ROOT/backend' && ./yanwari-message-backend\""
        echo "完全なやんわり伝言バックエンドを新しいターミナルで起動しました"
        echo "起動待機中..."
        sleep 8
    fi

    # バックエンドの起動確認
    echo -n "バックエンドサーバーの起動を確認中"
    for i in {1..15}; do
        if curl -s http://localhost:8080/health > /dev/null 2>&1; then
            echo -e "\n${GREEN}✅ バックエンドサーバー起動完了 (http://localhost:8080)${NC}"
            break
        fi
        echo -n "."
        sleep 2
    done

    # 2. フロントエンドサーバーの起動
    echo -e "\n${GREEN}2. フロントエンドサーバー起動中...${NC}"
    cd "$PROJECT_ROOT/frontend"

    # 既存のフロントエンドプロセスを確認
    if lsof -i :5173 > /dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  ポート5173は既に使用中です${NC}"
        echo "既存のフロントエンドサーバーを使用します"
    else
        # 新しいターミナルでフロントエンドを起動
        osascript -e "tell app \"Terminal\" to do script \"cd '$PROJECT_ROOT/frontend' && npm run dev\""
        echo "フロントエンドサーバーを新しいターミナルで起動しました"
        echo "起動待機中..."
        sleep 5
    fi

    # 3. iOSシミュレーターの起動
    echo -e "\n${GREEN}3. iOSシミュレーター起動中...${NC}"

    SIMULATOR_ID=$(get_simulator_id)

    if [ -z "$SIMULATOR_ID" ]; then
        echo -e "${RED}❌ iPhoneシミュレーターが見つかりません${NC}"
    else
        # シミュレーターの状態を確認
        SIMULATOR_STATE=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | grep -oE "\(.*\)" | tr -d "()")
        
        if [ "$SIMULATOR_STATE" = "Booted" ]; then
            echo -e "${YELLOW}⚠️  シミュレーターは既に起動しています${NC}"
        else
            xcrun simctl boot "$SIMULATOR_ID"
            echo "シミュレーターを起動しました"
            # Simulator.appを開く
            open -a Simulator
            sleep 3
        fi
        
        echo -e "${GREEN}✅ iOSシミュレーター起動完了${NC}"
    fi

    # 4. Flutterアプリの起動
    echo -e "\n${GREEN}4. Flutterモバイルアプリ起動中...${NC}"
    cd "$PROJECT_ROOT/mobile"

    # 依存関係の確認
    if [ ! -d "ios/Pods" ]; then
        echo "依存関係をインストール中..."
        flutter pub get
    fi

    # 既存のFlutterプロセスを確認
    FLUTTER_PID=$(find_flutter_process)
    if [ -n "$FLUTTER_PID" ]; then
        echo -e "${YELLOW}⚠️  Flutterアプリは既に起動中です (PID: $FLUTTER_PID)${NC}"
        echo "ホットリロードを実行するには: ./yanwari-start reload"
    else
        # Flutterアプリを起動
        if [ -n "$SIMULATOR_ID" ]; then
            # 新しいターミナルでFlutterを起動
            osascript -e "tell app \"Terminal\" to do script \"cd '$PROJECT_ROOT/mobile' && export PATH=\\\$PATH:/Users/fujinoyuki/development/flutter/bin && flutter run -d $SIMULATOR_ID\""
            echo "Flutterアプリを新しいターミナルで起動しました"
        else
            echo -e "${YELLOW}⚠️  シミュレーターが利用できないため、Webブラウザで起動します${NC}"
            osascript -e "tell app \"Terminal\" to do script \"cd '$PROJECT_ROOT/mobile' && export PATH=\\\$PATH:/Users/fujinoyuki/development/flutter/bin && flutter run -d chrome --web-port 3000\""
        fi
    fi

    # 5. 起動完了サマリー
    echo -e "\n${BLUE}=================================="
    echo -e "🎉 やんわり伝言 - 全環境起動完了！"
    echo -e "==================================${NC}"
    echo
    echo -e "${GREEN}アクセス可能なURL:${NC}"
    echo -e "  📡 バックエンドAPI: ${BLUE}http://localhost:8080${NC}"
    echo -e "  🖥️  フロントエンド: ${BLUE}http://localhost:5173${NC}"
    echo -e "  📱 モバイル(Web版): ${BLUE}http://localhost:3000${NC}"
    echo
    echo -e "${YELLOW}便利なコマンド:${NC}"
    echo -e "  ./yanwari-start status   # 環境状況確認"
    echo -e "  ./yanwari-start restart  # Flutterホットリスタート"
    echo -e "  ./yanwari-start reload   # Flutterホットリロード"
    echo -e "  ./yanwari-start stop     # 全環境停止"
    echo
    echo -e "${GREEN}Happy Coding! 🚀${NC}"

    # ヘルスチェックURL
    echo -e "\n${BLUE}動作確認用コマンド:${NC}"
    echo "  curl http://localhost:8080/health  # バックエンドヘルスチェック"
    echo "  open http://localhost:5173         # フロントエンドを開く"
}

# メイン処理
case "${1:-start}" in
    "restart"|"r")
        hot_restart
        ;;
    "reload"|"hot"|"h")
        hot_reload
        ;;
    "status"|"s")
        check_status
        ;;
    "stop"|"quit"|"q")
        stop_all
        ;;
    "start"|"")
        start_all
        ;;
    *)
        echo -e "${BLUE}🔧 やんわり伝言 - 起動・管理スクリプト${NC}"
        echo
        echo "使用方法:"
        echo -e "  ${GREEN}./yanwari-start${NC}          # 全環境起動"
        echo -e "  ${GREEN}./yanwari-start restart${NC}  # Flutterホットリスタート"
        echo -e "  ${GREEN}./yanwari-start reload${NC}   # Flutterホットリロード"
        echo -e "  ${GREEN}./yanwari-start status${NC}   # 環境状況確認"
        echo -e "  ${GREEN}./yanwari-start stop${NC}     # 全環境停止"
        echo
        echo "短縮形:"
        echo -e "  ${CYAN}./yanwari-start r${NC}        # restart"
        echo -e "  ${CYAN}./yanwari-start h${NC}        # reload (hot reload)"
        echo -e "  ${CYAN}./yanwari-start s${NC}        # status"
        echo -e "  ${CYAN}./yanwari-start q${NC}        # stop (quit)"
        ;;
esac